// server.js ‚Äî –ü–û–õ–ù–û–°–¢–¨–Æ –†–ê–ë–û–ß–ê–Ø –í–ï–†–°–ò–Ø –î–õ–Ø –§–¨–Æ–ß–ï–†–°–û–í
import express from 'express';
import path from 'path';
import { fileURLToPath } from 'url';
import dotenv from 'dotenv';

dotenv.config();

// ‚úÖ –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º —Ñ—É–Ω–∫—Ü–∏–∏ –∏–∑ bot.js
import { 
    getTickerPrice, 
    getKlines, 
    getAccountInfo 
} from './bingxApi.js';

import { 
    updateBotSettings, 
    executeTradingLogic, 
    getBotStatus, 
    startMultiPairAnalysis, 
    forceDailyTrade 
} from './bot.js';

const __filename = fileURLToPath(import.meta.url);
const __dirname = path.dirname(__filename);

const app = express();
const PORT = process.env.PORT || 10000;

app.use(express.json());
app.use(express.static(path.join(__dirname, 'public')));

// ‚úÖ –≠–Ω–¥–ø–æ–∏–Ω—Ç –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –ø–∞—Ä–æ–ª—è
app.get('/api/config', (req, res) => {
    res.json({
        success: true,
        data: {
            webPassword: process.env.WEB_INTERFACE_PASSWORD || 'admin123'
        }
    });
});

// ‚úÖ Health check
app.get('/health', (req, res) => {
    res.status(200).json({ status: 'OK', time: new Date().toISOString() });
});

// ‚úÖ API: –ø–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç—É—Å –±–æ—Ç–∞
app.get('/api/bot/status', async (req, res) => {
    try {
        const status = getBotStatus();
        
        // ‚úÖ –ò—Å–ø–æ–ª—å–∑—É–µ–º BTC-USDT –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Ü–µ–Ω—ã
        const ticker = await getTickerPrice("BTC-USDT");
        status.currentPrice = ticker.price || "N/A";
        
        // ‚úÖ –ü–æ–ª—É—á–∞–µ–º –±–∞–ª–∞–Ω—Å –¥–ª—è —Ñ—å—é—á–µ—Ä—Å–æ–≤
        let availableBalance = "0 USDT";
        if (!status.settings.useDemoMode) {
            const account = await getAccountInfo();
            if (account && account.balance !== undefined) {
                availableBalance = `${parseFloat(account.balance).toFixed(2)} USDT`;
            }
        } else {
            availableBalance = `${status.demoBalances.USDT?.toFixed(2)} USDT`;
        }
        
        status.availableBalance = availableBalance;
        status.lastUpdate = new Date().toISOString();
        
        res.json({ success: true, data: status });
    } catch (error) {
        console.error("–û—à–∏–±–∫–∞ /api/bot/status:", error.message);
        res.status(500).json({ success: false, error: error.message });
    }
});

// ‚úÖ API: —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
app.post('/api/bot/settings', (req, res) => {
    try {
        const settings = req.body;
        console.log("[API] üîÑ –ü–æ–ª—É—á–µ–Ω—ã –Ω–∞—Å—Ç—Ä–æ–π–∫–∏:", settings);
        updateBotSettings(settings);
        res.json({ success: true, message: "–ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã" });
    } catch (error) {
        console.error("–û—à–∏–±–∫–∞ /api/bot/settings:", error.message);
        res.status(500).json({ success: false, error: error.message });
    }
});

// ‚úÖ API: —Ç–æ—Ä–≥–æ–≤–∞—Ç—å —Å–µ–π—á–∞—Å (–∞–Ω–∞–ª–∏–∑ –≤—Å–µ—Ö –ø–∞—Ä)
app.post('/api/bot/trade-now', async (req, res) => {
    try {
        console.log("[API] ‚ö° –ó–∞–ø—É—â–µ–Ω —Ä—É—á–Ω–æ–π –∞–Ω–∞–ª–∏–∑ –≤—Å–µ—Ö –ø–∞—Ä");
        await executeTradingLogic();
        res.json({ success: true, message: "–ê–Ω–∞–ª–∏–∑ –≤—Å–µ—Ö –ø–∞—Ä –∑–∞–ø—É—â–µ–Ω", timestamp: new Date().toISOString() });
    } catch (error) {
        console.error("–û—à–∏–±–∫–∞ /api/bot/trade-now:", error.message);
        res.status(500).json({ success: false, error: error.message });
    }
});

// ‚úÖ API: –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–∞—è —Å–¥–µ–ª–∫–∞
app.post('/api/bot/force-trade', async (req, res) => {
    try {
        console.log("[API] üìÖ –ó–∞–ø—É—â–µ–Ω–∞ –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–∞—è —Å–¥–µ–ª–∫–∞");
        await forceDailyTrade();
        res.json({ success: true, message: "–ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–∞—è —Å–¥–µ–ª–∫–∞ –∑–∞–ø—É—â–µ–Ω–∞", timestamp: new Date().toISOString() });
    } catch (error) {
        console.error("–û—à–∏–±–∫–∞ /api/bot/force-trade:", error.message);
        res.status(500).json({ success: false, error: error.message });
    }
});

// ‚úÖ –†–æ—É—Ç—ã –¥–ª—è –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞
app.get('/', (req, res) => {
    res.redirect('/dashboard');
});

app.get('/dashboard', (req, res) => {
    res.sendFile(path.join(__dirname, 'public', 'dashboard.html'));
});

// ‚úÖ –û–±—Ä–∞–±–æ—Ç–∫–∞ 404
app.use('*', (req, res) => {
    console.log(`[404] –ó–∞–ø—Ä–æ—à–µ–Ω–Ω—ã–π –ø—É—Ç—å: ${req.path}`);
    res.status(404).json({ 
        error: 'Endpoint not found',
        requestedPath: req.path
    });
});

// ‚úÖ –ó–∞–ø—É—Å–∫ —Å–µ—Ä–≤–µ—Ä–∞
app.listen(PORT, '0.0.0.0', () => {
    console.log(`üöÄ –°–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω –Ω–∞ –ø–æ—Ä—Ç—É ${PORT}`);
    console.log(`üåê –ò–Ω—Ç–µ—Ä—Ñ–µ–π—Å: https://botvvv3333-2.onrender.com/dashboard`);
    console.log(`üîí –ü–∞—Ä–æ–ª—å –±–µ—Ä—ë—Ç—Å—è –∏–∑ WEB_INTERFACE_PASSWORD`);

    // ‚úÖ –ó–∞–ø—É—Å–∫–∞–µ–º –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –∞–Ω–∞–ª–∏–∑
    startMultiPairAnalysis();

    // ‚úÖ –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–∞—è —Å–¥–µ–ª–∫–∞ —Ä–∞–∑ –≤ –¥–µ–Ω—å
    setInterval(forceDailyTrade, 24 * 60 * 60 * 1000); // 24 —á–∞—Å–∞
});
