// ‚úÖ server.js ‚Äî –ò–°–ü–†–ê–í–õ–ï–ù–ù–ê–Ø –í–ï–†–°–ò–Ø (–±–µ–∑ —á—ë—Ä–Ω–æ–≥–æ —ç–∫—Ä–∞–Ω–∞)
import express from 'express';
import path from 'path';
import { fileURLToPath } from 'url';
import dotenv from 'dotenv';

dotenv.config();

import { getTickerPrice, getAccountInfo } from './bingxApi.js';
import { updateBotSettings, executeTradingLogic, getBotStatus, startMultiPairAnalysis, forceDailyTrade } from './bot.js';

const __filename = fileURLToPath(import.meta.url);
const __dirname = path.dirname(__filename);

const app = express();
const PORT = process.env.PORT || 10000;

app.use(express.json());
app.use(express.static(path.join(__dirname, 'public')));

// ‚úÖ –≠–Ω–¥–ø–æ–∏–Ω—Ç –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –ø–∞—Ä–æ–ª—è
app.get('/api/config', (req, res) => {
    res.json({
        success: true,
        data: { // ‚úÖ –ò–°–ü–†–ê–í–õ–ï–ù–û: —É–±—Ä–∞–Ω–∞ –ª–∏—à–Ω—è—è —Å–∫–æ–±–∫–∞, –¥–æ–±–∞–≤–ª–µ–Ω–æ "data"
            webPassword: process.env.WEB_INTERFACE_PASSWORD || 'admin123'
        }
    });
});

// ‚úÖ Health check
app.get('/health', (req, res) => {
    res.status(200).json({ status: 'OK', time: new Date().toISOString() });
});

// ‚úÖ API: –ø–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç—É—Å –±–æ—Ç–∞
app.get('/api/bot/status', async (req, res) => {
    try {
        const status = getBotStatus();
        const ticker = await getTickerPrice("BTC-USDT");
        status.currentPrice = ticker.price || "N/A";

        let availableBalance = "0 USDT";
        if (!status.settings.useDemoMode) {
            const account = await getAccountInfo();
            if (account && account.assets && account.assets.length > 0) {
                const usdtAsset = account.assets.find(a => a.asset === 'USDT');
                if (usdtAsset && usdtAsset.walletBalance) {
                    availableBalance = `${parseFloat(usdtAsset.walletBalance).toFixed(2)} USDT`;
                } else if (account.walletBalance) {
                    availableBalance = `${parseFloat(account.walletBalance).toFixed(2)} USDT`;
                }
            }
        } else {
            availableBalance = `${(status.demoBalances.USDT || 0).toFixed(2)} USDT`;
        }
        status.availableBalance = availableBalance;
        status.lastUpdate = new Date().toISOString();

        res.json({ success: true, data: status }); // ‚úÖ –ò–°–ü–†–ê–í–õ–ï–ù–û: –¥–æ–±–∞–≤–ª–µ–Ω–æ "data"
    } catch (error) {
        console.error("–û—à–∏–±–∫–∞ /api/bot/status:", error.message);
        res.status(500).json({ success: false, error: error.message });
    }
});

// ‚úÖ API: —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
app.post('/api/bot/settings', (req, res) => {
    try {
        updateBotSettings(req.body);
        res.json({ success: true, message: "–ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã" });
    } catch (error) {
        console.error("–û—à–∏–±–∫–∞ /api/bot/settings:", error.message);
        res.status(500).json({ success: false, error: error.message });
    }
});

// ‚úÖ API: —Ç–æ—Ä–≥–æ–≤–∞—Ç—å —Å–µ–π—á–∞—Å
app.post('/api/bot/trade-now', async (req, res) => {
    try {
        await executeTradingLogic();
        res.json({ success: true, message: "–¢–æ—Ä–≥–æ–≤–ª—è –∑–∞–ø—É—â–µ–Ω–∞", timestamp: new Date().toISOString() });
    } catch (error) {
        console.error("–û—à–∏–±–∫–∞ /api/bot/trade-now:", error.message);
        res.status(500).json({ success: false, error: error.message });
    }
});

// ‚úÖ API: –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–∞—è —Å–¥–µ–ª–∫–∞
app.post('/api/bot/force-trade', async (req, res) => {
    try {
        await forceDailyTrade();
        res.json({ success: true, message: "–ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–∞—è —Å–¥–µ–ª–∫–∞ –∑–∞–ø—É—â–µ–Ω–∞", timestamp: new Date().toISOString() });
    } catch (error) {
        console.error("–û—à–∏–±–∫–∞ /api/bot/force-trade:", error.message);
        res.status(500).json({ success: false, error: error.message });
    }
});

// ‚úÖ –ì–ª–∞–≤–Ω–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞ ‚Äî –ø–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –Ω–∞ /dashboard
app.get('/', (req, res) => {
    res.redirect('/dashboard');
});

// ‚úÖ –°—Ç—Ä–∞–Ω–∏—Ü–∞ –¥–∞—à–±–æ—Ä–¥–∞ ‚Äî –û–°–ù–û–í–ù–û–ï –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï
app.get('/dashboard', (req, res) => {
    const dashboardPath = path.join(__dirname, 'public', 'dashboard.html');
    
    // ‚úÖ –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ —Ñ–∞–π–ª
    if (!fs.existsSync(dashboardPath)) {
        console.error('[‚ùå] –§–∞–π–ª dashboard.html –Ω–µ –Ω–∞–π–¥–µ–Ω –ø–æ –ø—É—Ç–∏:', dashboardPath);
        res.status(500).send(`
            <h1>–û—à–∏–±–∫–∞ 500: Dashboard –Ω–µ –Ω–∞–π–¥–µ–Ω</h1>
            <p>–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ —Ñ–∞–π–ª <code>public/dashboard.html</code> —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –≤ –≤–∞—à–µ–º —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–∏.</p>
            <p>–¢–µ–∫—É—â–∏–π –ø—É—Ç—å: ${dashboardPath}</p>
        `);
        return;
    }

    res.sendFile(dashboardPath, (err) => {
        if (err) {
            console.error('[‚ùå] –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ dashboard.html:', err.message);
            res.status(500).send(`
                <h1>–û—à–∏–±–∫–∞ 500: –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å Dashboard</h1>
                <p>${err.message}</p>
            `);
        }
    });
});

// ‚úÖ –û–±—Ä–∞–±–æ—Ç–∫–∞ 404
app.use('*', (req, res) => {
    res.status(404).json({ 
        error: 'Endpoint not found',
        requestedPath: req.path
    });
});

// ‚úÖ –ó–∞–ø—É—Å–∫ —Å–µ—Ä–≤–µ—Ä–∞
app.listen(PORT, '0.0.0.0', () => {
    console.log(`üöÄ –°–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω –Ω–∞ –ø–æ—Ä—Ç—É ${PORT}`);
    console.log(`üåê –ò–Ω—Ç–µ—Ä—Ñ–µ–π—Å: https://botvvv3333-2.onrender.com/dashboard`);
    console.log(`üîí –ü–∞—Ä–æ–ª—å –±–µ—Ä—ë—Ç—Å—è –∏–∑ WEB_INTERFACE_PASSWORD`);

    startMultiPairAnalysis();
    setInterval(forceDailyTrade, 24 * 60 * 60 * 1000);
});

// ‚úÖ –î–æ–±–∞–≤–ª—è–µ–º fs –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏—è —Ñ–∞–π–ª–∞
import fs from 'fs';
