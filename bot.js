// bot.js ‚Äî –ê–í–¢–û–ú–ê–¢–ò–ß–ï–°–ö–ò–ô –¢–û–†–ì–û–í–´–ô –ë–û–¢ –î–õ–Ø –§–¨–Æ–ß–ï–†–°–û–í
import { 
    getKlines, 
    getTickerPrice, 
    getAccountInfo, 
    createOrder,
    getContracts,
    setLeverage
} from './bingxApi.js';

import { 
    calculateRSI, 
    calculateBollingerBands
} from './technicalAnalysis.js';

import fs from 'fs';
import path from 'path';

// üìÅ –°–æ–∑–¥–∞—ë–º –ø–∞–ø–∫—É logs
const LOGS_DIR = './logs';
if (!fs.existsSync(LOGS_DIR)) fs.mkdirSync(LOGS_DIR);

function logToFile(filename, message) {
    const logPath = path.join(LOGS_DIR, filename);
    const timestamp = new Date().toISOString();
    const logMessage = `[${timestamp}] ${message}\n`;
    fs.appendFileSync(logPath, logMessage, 'utf8');
}

function logError(message) {
    logToFile('errors.log', `ERROR: ${message}`);
}

// ‚úÖ –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –ø–∞—Ä –ø—Ä–∏ —Å—Ç–∞—Ä—Ç–µ
let AVAILABLE_PAIRS = [];
let isPairsLoaded = false;

async function loadAvailablePairs() {
    try {
        const contracts = await getContracts();
       AVAILABLE_PAIRS = contracts
        .filter(c => c.symbol.endsWith('-USDT') && c.status === "TRADING")
        .map(c => c.symbol); // ‚úÖ –¢–æ–ª—å–∫–æ —Ç–æ—Ä–≥—É–µ–º—ã–µ –ø–∞—Ä—ã
        );
        console.log(`[‚úÖ] –ó–∞–≥—Ä—É–∂–µ–Ω–æ ${AVAILABLE_PAIRS.length} –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –ø–∞—Ä`);
        isPairsLoaded = true;
    } catch (error) {
        console.error('[‚ùå] –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –ø–∞—Ä:', error.message);
        // Fallback —Å–ø–∏—Å–æ–∫
        AVAILABLE_PAIRS = [
            "BTC-USDT", "ETH-USDT", "BNB-USDT", "SOL-USDT", "XRP-USDT",
            "ADA-USDT", "DOGE-USDT", "TON-USDT", "AVAX-USDT", "SHIB-USDT"
        ];
    }
}

async function waitForPairs() {
    if (isPairsLoaded) return;
    await loadAvailablePairs();
}

let botSettings = {
    strategy: 'simple',
    riskLevel: 3, // 3% –æ—Ç –±–∞–ª–∞–Ω—Å–∞ –Ω–∞ —Å–¥–µ–ª–∫—É
    isEnabled: true,
    useDemoMode: true,
    analysisInterval: 300000, // 5 –º–∏–Ω—É—Ç
    feeRate: 0.001, // 0.1% –∫–æ–º–∏—Å—Å–∏—è
    useStopLoss: true,
    stopLossPercent: 2.0,
    useTakeProfit: true,
    takeProfitPercent: 4.0,
    lastTradeTime: null,
    minTradeInterval: 300000,
    maxConcurrentRequests: 5,
    defaultLeverage: 10 // ‚úÖ –ü–ª–µ—á–æ 10x
};

let tradeHistory = [];
let demoBalances = { 'USDT': 1000.0 };

export function updateBotSettings(newSettings) {
    if (newSettings.useDemoMode !== undefined) {
        botSettings.useDemoMode = newSettings.useDemoMode;
        console.log(`[BOT] üîÑ –ü–µ—Ä–µ–∫–ª—é—á–µ–Ω —Ä–µ–∂–∏–º: ${botSettings.useDemoMode ? '–î–ï–ú–û' : '–†–ï–ê–õ–¨–ù–´–ô'}`);
    }
    botSettings = { ...botSettings, ...newSettings };
    console.log(`[BOT] üîÑ –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –æ–±–Ω–æ–≤–ª–µ–Ω—ã:`, botSettings);
}

export function getBotStatus() {
    return {
        settings: { ...botSettings },
        tradeHistory: [...tradeHistory],
        demoMode: botSettings.useDemoMode,
        demoBalances: { ...demoBalances },
        availablePairs: [...AVAILABLE_PAIRS]
    };
}

function calculatePnL(symbol, currentSide, currentPrice, currentQuantity) {
    const history = tradeHistory.filter(t => t.symbol === symbol && t.status === 'FILLED');
    if (history.length === 0) return 0;
    let totalPnL = 0;
    let remainingQty = currentQuantity;
    for (let i = 0; i < history.length && remainingQty > 0; i++) {
        const prev = history[i];
        if (prev.side === currentSide) continue;
        const closeQty = Math.min(remainingQty, prev.quantity);
        let pnl = 0;
        if (currentSide === 'SELL') {
            pnl = (currentPrice - prev.price) * closeQty;
        } else {
            pnl = (prev.price - currentPrice) * closeQty;
        }
        totalPnL += pnl;
        remainingQty -= closeQty;
    }
    return totalPnL;
}

export async function forceDailyTrade() {
    if (!botSettings.isEnabled) return;
    await waitForPairs();
    
    console.log(`[üìÖ] ‚ö° –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–∞—è –µ–∂–µ–¥–Ω–µ–≤–Ω–∞—è —Å–¥–µ–ª–∫–∞`);
    logToFile('trades.log', '–ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–∞—è —Å–¥–µ–ª–∫–∞ –∏–Ω–∏—Ü–∏–∏—Ä–æ–≤–∞–Ω–∞');
    
    const randomPair = AVAILABLE_PAIRS[Math.floor(Math.random() * AVAILABLE_PAIRS.length)];
    const klines = await getKlines(randomPair, '5m', 100);
    if (!klines || klines.length < 14) {
        console.log(`[‚ö†Ô∏è] üìâ –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è ${randomPair}`);
        return;
    }
    const side = Math.random() > 0.5 ? 'BUY' : 'SELL';
    console.log(`[üìÖ] üéØ –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω—ã–π —Å–∏–≥–Ω–∞–ª: ${side} –¥–ª—è ${randomPair}`);
    await executeSingleTrade(randomPair, side, klines);
}

async function executeSingleTrade(symbol, forcedSide = null, klines = null) {
    console.log(`\n[üîç ${new Date().toISOString()}] === ü§ñ –ê–ù–ê–õ–ò–ó –ü–ê–†–´: ${symbol} ===`);
    
    try {
        // ‚úÖ –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ –ø–∞—Ä—ã
        try {
            await getTickerPrice(symbol);
        } catch (e) {
            console.log(`[‚ö†Ô∏è] –ü–∞—Ä–∞ ${symbol} –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –∏–ª–∏ –Ω–µ —Ç–æ—Ä–≥—É–µ—Ç—Å—è`);
            return null;
        }

        if (!klines) {
            klines = await getKlines(symbol, '5m', 100);
            if (!klines || klines.length < 14) {
                console.log(`[‚ö†Ô∏è] üìâ –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è ${symbol}`);
                return null;
            }
        }

        const closePrices = klines.map(candle => parseFloat(candle[4]));
        const currentPrice = closePrices[closePrices.length - 1];

        // ‚úÖ –ü—Ä–æ—Å—Ç–∞—è –∏ –Ω–∞–¥—ë–∂–Ω–∞—è —Å—Ç—Ä–∞—Ç–µ–≥–∏—è
        const rsi = calculateRSI(klines);
        const bb = calculateBollingerBands(closePrices, 20, 2);
        const upperBB = bb.upper[bb.upper.length - 1];
        const lowerBB = bb.lower[bb.lower.length - 1];

        let signal = 'NEUTRAL';
        if (rsi.rsi < 30 && currentPrice < lowerBB) signal = 'BUY';
        else if (rsi.rsi > 70 && currentPrice > upperBB) signal = 'SELL';

        if (signal === 'NEUTRAL') {
            console.log(`[üí§] üõë –ù–µ—Ç —Ç–æ—Ä–≥–æ–≤–æ–≥–æ —Å–∏–≥–Ω–∞–ª–∞ –¥–ª—è ${symbol}`);
            return null;
        }

        // ‚úÖ –ü–æ–ª—É—á–∞–µ–º –±–∞–ª–∞–Ω—Å
        let availableBalance;
        if (botSettings.useDemoMode) {
            availableBalance = demoBalances.USDT || 0;
            console.log(`[üè¶ DEMO] üìä –ë–∞–ª–∞–Ω—Å: ${availableBalance.toFixed(2)} USDT`);
        } else {
            const account = await getAccountInfo();
            availableBalance = account.balance ? parseFloat(account.balance) : 0;
            console.log(`[üè¶ REAL] üìä –ë–∞–ª–∞–Ω—Å: ${availableBalance.toFixed(2)} USDT`);
        }

        if (isNaN(availableBalance) || availableBalance <= 0) {
            console.log(`[‚ö†Ô∏è] üõë –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –±–∞–ª–∞–Ω—Å–∞`);
            return null;
        }

        // ‚úÖ –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø–ª–µ—á–æ
        if (!botSettings.useDemoMode) {
            try {
                await setLeverage(symbol, botSettings.defaultLeverage);
                console.log(`[‚öñÔ∏è] –£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ –ø–ª–µ—á–æ ${botSettings.defaultLeverage}x –¥–ª—è ${symbol}`);
            } catch (e) {
                console.log(`[‚ö†Ô∏è] –ù–µ —É–¥–∞–ª–æ—Å—å —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –ø–ª–µ—á–æ:`, e.message);
            }
        }

        // ‚úÖ –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º —Ä–∞–∑–º–µ—Ä –ø–æ–∑–∏—Ü–∏–∏ —Å —É—á—ë—Ç–æ–º —Ä–∏—Å–∫–∞ –∏ –ø–ª–µ—á–∞
        const riskAmount = availableBalance * (botSettings.riskLevel * 0.01);
        const positionSize = (riskAmount * botSettings.defaultLeverage) / currentPrice;
        const quantity = positionSize;

        if (quantity <= 0.000001) {
            console.log(`[‚ö†Ô∏è] üõë –°–ª–∏—à–∫–æ–º –º–∞–ª–µ–Ω—å–∫–∏–π —Ä–∞–∑–º–µ—Ä –æ—Ä–¥–µ—Ä–∞: ${quantity.toFixed(6)}`);
            return null;
        }

        // ‚úÖ –ü—Ä–æ–≤–µ—Ä–∫–∞ –∏–Ω—Ç–µ—Ä–≤–∞–ª–∞ –º–µ–∂–¥—É —Å–¥–µ–ª–∫–∞–º–∏
        const now = Date.now();
        if (botSettings.lastTradeTime && (now - botSettings.lastTradeTime) < botSettings.minTradeInterval) {
            console.log(`[‚è≥] ‚è∏Ô∏è –°–ª–∏—à–∫–æ–º —Ä–∞–Ω–æ –¥–ª—è –Ω–æ–≤–æ–π —Å–¥–µ–ª–∫–∏`);
            return null;
        }

        // ‚úÖ –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –æ—Ä–¥–µ—Ä–∞
        let orderResult;
        if (botSettings.useDemoMode) {
            // üéÆ –î–µ–º–æ-—Ä–µ–∂–∏–º —Å —É—á—ë—Ç–æ–º –ø–ª–µ—á–∞ –∏ –∫–æ–º–∏—Å—Å–∏–∏
            const notionalValue = quantity * currentPrice;
            const fee = notionalValue * botSettings.feeRate;
            demoBalances.USDT -= fee;
            
            // –ò–º–∏—Ç–∞—Ü–∏—è PnL (1% –ø—Ä–∏–±—ã–ª–∏/—É–±—ã—Ç–∫–∞ –¥–ª—è –¥–µ–º–æ)
            const pnl = signal === 'BUY' ? notionalValue * 0.01 : notionalValue * -0.01;
            demoBalances.USDT += pnl;
            
            orderResult = { 
                orderId: `DEMO-${Date.now()}`, 
                status: 'FILLED',
                price: currentPrice,
                quantity: quantity
            };
            console.log(`[üéÆ DEMO] ‚úÖ –û—Ä–¥–µ—Ä: ${signal} ${quantity.toFixed(6)} ${symbol} —Å –ø–ª–µ—á–æ–º ${botSettings.defaultLeverage}x`);
        } else {
            // üöÄ –†–µ–∞–ª—å–Ω—ã–π –æ—Ä–¥–µ—Ä
            orderResult = await createOrder(symbol, signal, 'MARKET', quantity.toFixed(6));
            console.log(`[üöÄ REAL] ‚úÖ –û—Ä–¥–µ—Ä –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω: ${signal} ${quantity.toFixed(6)} ${symbol}`);
        }

        botSettings.lastTradeTime = now;

        // ‚úÖ –†–∞—Å—á—ë—Ç PnL –∏ –∑–∞–ø–∏—Å—å –≤ –∏—Å—Ç–æ—Ä–∏—é
        const pnl = calculatePnL(symbol, signal, currentPrice, quantity);
        const pnlPercent = quantity > 0 ? (pnl / (quantity * currentPrice)) * 100 : 0;

        const tradeRecord = {
            timestamp: now,
            symbol,
            side: signal,
            price: currentPrice,
            quantity: quantity,
            leverage: botSettings.defaultLeverage,
            mode: botSettings.useDemoMode ? 'DEMO' : 'REAL',
            orderId: orderResult.orderId || 'N/A',
            fee: botSettings.useDemoMode ? (quantity * currentPrice * botSettings.feeRate) : 0,
            pnl: pnl,
            pnlPercent: pnlPercent,
            status: 'FILLED'
        };

        tradeHistory.push(tradeRecord);
        logToFile('trades.log', `TRADE | ${tradeRecord.mode} | ${signal} ${symbol} @ ${currentPrice} | –ö–æ–ª-–≤–æ: ${quantity.toFixed(6)} | –ü–ª–µ—á–æ: ${botSettings.defaultLeverage}x | PnL: ${pnl.toFixed(4)}`);
        console.log(`[‚úÖ] üìù –°–¥–µ–ª–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∞`);

        // ‚úÖ –£—Å—Ç–∞–Ω–æ–≤–∫–∞ Stop-Loss –∏ Take-Profit
        if (botSettings.useStopLoss || botSettings.useTakeProfit) {
            const slSide = signal === 'BUY' ? 'SELL' : 'BUY';
            const tpSide = slSide;

            try {
                if (botSettings.useStopLoss && !botSettings.useDemoMode) {
                    const slPrice = signal === 'BUY'
                        ? currentPrice * (1 - botSettings.stopLossPercent / 100)
                        : currentPrice * (1 + botSettings.stopLossPercent / 100);
                    await createOrder(symbol, slSide, 'STOP_MARKET', quantity.toFixed(6), null, slPrice.toFixed(8));
                    console.log(`[üöÄ REAL SL] üõë Stop-Loss —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω: ${slPrice.toFixed(8)}`);
                }

                if (botSettings.useTakeProfit && !botSettings.useDemoMode) {
                    const tpPrice = signal === 'BUY'
                        ? currentPrice * (1 + botSettings.takeProfitPercent / 100)
                        : currentPrice * (1 - botSettings.takeProfitPercent / 100);
                    await createOrder(symbol, tpSide, 'TAKE_PROFIT_MARKET', quantity.toFixed(6), null, tpPrice.toFixed(8));
                    console.log(`[üöÄ REAL TP] üéØ Take-Profit —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω: ${tpPrice.toFixed(8)}`);
                }
            } catch (sltpError) {
                console.error(`[‚ö†Ô∏è SL/TP ERROR]`, sltpError.message);
                logError(`–û—à–∏–±–∫–∞ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ SL/TP –¥–ª—è ${symbol}: ${sltpError.message}`);
            }
        }

        return tradeRecord;

    } catch (error) {
        console.error(`[‚ùå] üö® –û—à–∏–±–∫–∞ –¥–ª—è ${symbol}:`, error.message);
        logError(`–û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞/—Ç–æ—Ä–≥–æ–≤–ª–∏ –¥–ª—è ${symbol}: ${error.message}`);
        return null;
    }
}

export async function executeTradingLogic() {
    await waitForPairs();
    console.log(`[üîÑ] –ó–∞–ø—É—Å–∫ –∞–Ω–∞–ª–∏–∑–∞ ${AVAILABLE_PAIRS.length} –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –ø–∞—Ä...`);

    const results = [];
    const batchSize = botSettings.maxConcurrentRequests;

    for (let i = 0; i < AVAILABLE_PAIRS.length; i += batchSize) {
        const batch = AVAILABLE_PAIRS.slice(i, i + batchSize);
        const batchPromises = batch.map(pair => executeSingleTrade(pair));
        const batchResults = await Promise.allSettled(batchPromises);
        results.push(...batchResults);
        
        if (i + batchSize < AVAILABLE_PAIRS.length) {
            await new Promise(resolve => setTimeout(resolve, 2000)); // –ø–∞—É–∑–∞ 2 —Å–µ–∫
        }
    }

    console.log("[‚úÖ] –ê–Ω–∞–ª–∏–∑ –∏ —Ç–æ—Ä–≥–æ–≤–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω—ã.");
}

export function startMultiPairAnalysis() {
    loadAvailablePairs();
    console.log(`[‚è∞] –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è —Ç–æ—Ä–≥–æ–≤–ª—è –∫–∞–∂–¥—ã–µ ${botSettings.analysisInterval / 60000} –º–∏–Ω—É—Ç`);
    setInterval(executeTradingLogic, botSettings.analysisInterval);
}
