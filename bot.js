// ‚úÖ bot.js ‚Äî –ê–í–¢–û–ú–ê–¢–ò–ß–ï–°–ö–ò–ô –¢–û–†–ì–û–í–´–ô –ë–û–¢ (—Ç–æ—Ä–≥—É–µ—Ç –ö–ê–ñ–î–´–ô –¶–ò–ö–õ)
import { 
    getKlines, 
    getTickerPrice, 
    getAccountInfo, 
    createOrder,
    getContracts,
    setLeverage
} from './bingxApi.js';

import { 
    calculateRSI, 
    calculateBollingerBands
} from './technicalAnalysis.js';

import fs from 'fs';
import path from 'path';

// üìÅ –°–æ–∑–¥–∞—ë–º –ø–∞–ø–∫—É logs
const LOGS_DIR = './logs';
if (!fs.existsSync(LOGS_DIR)) fs.mkdirSync(LOGS_DIR);

function logToFile(filename, message) {
    const logPath = path.join(LOGS_DIR, filename);
    const timestamp = new Date().toISOString();
    const logMessage = `[${timestamp}] ${message}\n`;
    fs.appendFileSync(logPath, logMessage, 'utf8');
}

function logError(message) {
    logToFile('errors.log', `ERROR: ${message}`);
}

// ‚úÖ –ê–∫—Ç—É–∞–ª—å–Ω—ã–π —Å–ø–∏—Å–æ–∫ –ø–∞—Ä (–ø—Ä–æ–≤–µ—Ä–µ–Ω–æ –Ω–∞ BingX Perp Futures)
const KNOWN_GOOD_PAIRS = [
    "BTC-USDT", "ETH-USDT", "BNB-USDT", "SOL-USDT", "XRP-USDT",
    "ADA-USDT", "DOGE-USDT", "AVAX-USDT", "DOT-USDT", "LINK-USDT",
    "TRX-USDT", "NEAR-USDT", "ATOM-USDT", "UNI-USDT", "APT-USDT",
    "LTC-USDT", "SHIB-USDT", "BCH-USDT", "XLM-USDT", "ETC-USDT"
];

let AVAILABLE_PAIRS = [...KNOWN_GOOD_PAIRS];
let isPairsLoaded = false;

async function loadAvailablePairs() {
    try {
        const contracts = await getContracts();
        if (Array.isArray(contracts) && contracts.length > 0) {
            const validPairs = contracts
                .filter(c => c && c.symbol && c.symbol.endsWith('-USDT') && c.status === "TRADING")
                .map(c => c.symbol);
            if (validPairs.length > 0) {
                AVAILABLE_PAIRS = validPairs;
                console.log(`[‚úÖ] –ó–∞–≥—Ä—É–∂–µ–Ω–æ ${AVAILABLE_PAIRS.length} —Ä–µ–∞–ª—å–Ω—ã—Ö –ø–∞—Ä`);
            }
        }
    } catch (error) {
        console.log('[‚ö†Ô∏è] –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø—Ä–æ–≤–µ—Ä–µ–Ω–Ω—ã–π —Å–ø–∏—Å–æ–∫ –ø–∞—Ä');
    }
    isPairsLoaded = true;
}

async function waitForPairs() {
    if (isPairsLoaded) return;
    await loadAvailablePairs();
}

let botSettings = {
    riskLevel: 2, // 2% —Ä–∏—Å–∫–∞ –Ω–∞ —Å–¥–µ–ª–∫—É
    useDemoMode: true,
    analysisInterval: 300000,
    feeRate: 0.001,
    useStopLoss: true,
    stopLossPercent: 3.0,
    useTakeProfit: true,
    takeProfitPercent: 6.0,
    lastTradeTime: null,
    minTradeInterval: 300000,
    maxConcurrentRequests: 5,
    defaultLeverage: 10
};

let tradeHistory = [];
let demoBalances = { 'USDT': 1000.0 };

export function updateBotSettings(newSettings) {
    if (newSettings.useDemoMode !== undefined) {
        botSettings.useDemoMode = newSettings.useDemoMode;
        console.log(`[BOT] üîÑ –ü–µ—Ä–µ–∫–ª—é—á–µ–Ω —Ä–µ–∂–∏–º: ${botSettings.useDemoMode ? '–î–ï–ú–û' : '–†–ï–ê–õ–¨–ù–´–ô'}`);
    }
    botSettings = { ...botSettings, ...newSettings };
    console.log(`[BOT] üîÑ –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –æ–±–Ω–æ–≤–ª–µ–Ω—ã:`, botSettings);
}

export function getBotStatus() {
    return {
        settings: { ...botSettings },
        tradeHistory: [...tradeHistory],
        demoMode: botSettings.useDemoMode,
        demoBalances: { ...demoBalances },
        availablePairs: [...AVAILABLE_PAIRS]
    };
}

export async function forceDailyTrade() {
    if (!botSettings.isEnabled) return;
    await waitForPairs();
    
    const randomPair = AVAILABLE_PAIRS[Math.floor(Math.random() * AVAILABLE_PAIRS.length)];
    const side = Math.random() > 0.5 ? 'BUY' : 'SELL';
    await executeSingleTrade(randomPair, side);
}

async function executeSingleTrade(symbol, forcedSide = null) {
    console.log(`\n[üîç ${new Date().toISOString()}] === ü§ñ –¢–û–†–ì–û–í–õ–Ø –ü–û –ü–ê–†–ï: ${symbol} ===`);
    
    try {
        // ‚úÖ –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–∞—Ä—É
        try {
            await getTickerPrice(symbol);
        } catch (e) {
            console.log(`[‚ö†Ô∏è] –ü–∞—Ä–∞ ${symbol} –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞`);
            return null;
        }

        // ‚úÖ –ü–æ–ª—É—á–∞–µ–º –±–∞–ª–∞–Ω—Å
        let availableBalance;
        if (botSettings.useDemoMode) {
            availableBalance = demoBalances.USDT || 0;
        } else {
            const account = await getAccountInfo();
            availableBalance = account.balance ? parseFloat(account.balance) : 0;
        }

        if (isNaN(availableBalance) || availableBalance <= 10) {
            console.log(`[‚ö†Ô∏è] üõë –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –±–∞–ª–∞–Ω—Å–∞`);
            return null;
        }

        // ‚úÖ –ü–æ–ª—É—á–∞–µ–º —Ü–µ–Ω—É
        const ticker = await getTickerPrice(symbol);
        const price = parseFloat(ticker.price);

        // ‚úÖ –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø–ª–µ—á–æ
        if (!botSettings.useDemoMode) {
            try {
                await setLeverage(symbol, botSettings.defaultLeverage);
            } catch (e) {
                console.log(`[‚ö†Ô∏è] –ù–µ —É–¥–∞–ª–æ—Å—å —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –ø–ª–µ—á–æ`);
            }
        }

        // ‚úÖ –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º —Ä–∞–∑–º–µ—Ä –ø–æ–∑–∏—Ü–∏–∏ (2% –æ—Ç –±–∞–ª–∞–Ω—Å–∞ —Å –ø–ª–µ—á–æ–º 10x)
        const riskAmount = availableBalance * (botSettings.riskLevel * 0.01);
        const positionSize = (riskAmount * botSettings.defaultLeverage) / price;
        const quantity = positionSize;

        if (quantity <= 0.000001) {
            console.log(`[‚ö†Ô∏è] üõë –°–ª–∏—à–∫–æ–º –º–∞–ª–µ–Ω—å–∫–∏–π —Ä–∞–∑–º–µ—Ä –æ—Ä–¥–µ—Ä–∞`);
            return null;
        }

        // ‚úÖ –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Å—Ç–æ—Ä–æ–Ω—É —Å–¥–µ–ª–∫–∏
        let side = forcedSide || (Math.random() > 0.5 ? 'BUY' : 'SELL');

        // ‚úÖ –í—ã–ø–æ–ª–Ω—è–µ–º –æ—Ä–¥–µ—Ä
        let orderResult;
        if (botSettings.useDemoMode) {
            const notionalValue = quantity * price;
            const fee = notionalValue * botSettings.feeRate;
            demoBalances.USDT -= fee;
            
            // –ò–º–∏—Ç–∞—Ü–∏—è –ø—Ä–∏–±—ã–ª–∏/—É–±—ã—Ç–∫–∞
            const pnl = side === 'BUY' ? notionalValue * 0.02 : notionalValue * -0.02;
            demoBalances.USDT += pnl;
            
            orderResult = { orderId: `DEMO-${Date.now()}`, status: 'FILLED' };
            console.log(`[üéÆ DEMO] ‚úÖ –û—Ä–¥–µ—Ä: ${side} ${quantity.toFixed(6)} ${symbol}`);
        } else {
            orderResult = await createOrder(symbol, side, 'MARKET', quantity.toFixed(6));
            console.log(`[üöÄ REAL] ‚úÖ –û—Ä–¥–µ—Ä –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω: ${side} ${quantity.toFixed(6)} ${symbol}`);
        }

        // ‚úÖ –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –≤ –∏—Å—Ç–æ—Ä–∏—é
        const tradeRecord = {
            timestamp: Date.now(),
            symbol,
            side,
            price,
            quantity,
            leverage: botSettings.defaultLeverage,
            mode: botSettings.useDemoMode ? 'DEMO' : 'REAL',
            orderId: orderResult.orderId || 'N/A',
            status: 'FILLED'
        };

        tradeHistory.push(tradeRecord);
        logToFile('trades.log', `TRADE | ${tradeRecord.mode} | ${side} ${symbol} @ ${price} | –ö–æ–ª-–≤–æ: ${quantity.toFixed(6)} | –ü–ª–µ—á–æ: ${botSettings.defaultLeverage}x`);
        console.log(`[‚úÖ] üìù –°–¥–µ–ª–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∞`);

        // ‚úÖ –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º SL/TP
        if (botSettings.useStopLoss && !botSettings.useDemoMode) {
            const slSide = side === 'BUY' ? 'SELL' : 'BUY';
            const slPrice = side === 'BUY' 
                ? price * (1 - botSettings.stopLossPercent / 100)
                : price * (1 + botSettings.stopLossPercent / 100);
            await createOrder(symbol, slSide, 'STOP_MARKET', quantity.toFixed(6), null, slPrice.toFixed(8));
        }

        if (botSettings.useTakeProfit && !botSettings.useDemoMode) {
            const tpSide = side === 'BUY' ? 'SELL' : 'BUY';
            const tpPrice = side === 'BUY'
                ? price * (1 + botSettings.takeProfitPercent / 100)
                : price * (1 - botSettings.takeProfitPercent / 100);
            await createOrder(symbol, tpSide, 'TAKE_PROFIT_MARKET', quantity.toFixed(6), null, tpPrice.toFixed(8));
        }

        return tradeRecord;

    } catch (error) {
        console.error(`[‚ùå] –û—à–∏–±–∫–∞ –¥–ª—è ${symbol}:`, error.message);
        return null;
    }
}

export async function executeTradingLogic() {
    await waitForPairs();
    console.log(`[üîÑ] –ó–∞–ø—É—Å–∫ —Ç–æ—Ä–≥–æ–≤–ª–∏ –ø–æ ${AVAILABLE_PAIRS.length} –ø–∞—Ä–∞–º...`);

    // ‚úÖ –¢–æ—Ä–≥—É–µ–º –ø–æ —Å–ª—É—á–∞–π–Ω—ã–º 5 –ø–∞—Ä–∞–º –∫–∞–∂–¥—ã–µ 5 –º–∏–Ω—É—Ç
    const shuffled = [...AVAILABLE_PAIRS].sort(() => 0.5 - Math.random());
    const pairsToTrade = shuffled.slice(0, 5);

    for (let pair of pairsToTrade) {
        await executeSingleTrade(pair);
        await new Promise(resolve => setTimeout(resolve, 1000));
    }

    console.log("[‚úÖ] –¢–æ—Ä–≥–æ–≤–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞.");
}

export function startMultiPairAnalysis() {
    loadAvailablePairs();
    console.log(`[‚è∞] –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è —Ç–æ—Ä–≥–æ–≤–ª—è –∫–∞–∂–¥—ã–µ 5 –º–∏–Ω—É—Ç`);
    setInterval(executeTradingLogic, botSettings.analysisInterval);
}
