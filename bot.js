// bot.js
import { getKlines, createOrder, getAccountBalance, getOpenOrders, cancelOrder, callBingxApi } from './bingxApi.js';
import { generateTradingSignal } from './technicalAnalysis.js';

// –ì–ª–æ–±–∞–ª—å–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –±–æ—Ç–∞ (–º–æ–≥—É—Ç –æ–±–Ω–æ–≤–ª—è—Ç—å—Å—è —á–µ—Ä–µ–∑ –≤–µ–±-–∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å)
let botSettings = {
    tradingPair: 'BTC-USDT',    // –¢–æ—Ä–≥–æ–≤–∞—è –ø–∞—Ä–∞
    strategy: 'stochastic',     // –°—Ç—Ä–∞—Ç–µ–≥–∏—è: 'stochastic', 'rsi', 'macd', 'combo'
    riskLevel: 5,               // –£—Ä–æ–≤–µ–Ω—å —Ä–∏—Å–∫–∞ 1-10 (–ø—Ä–æ—Ü–µ–Ω—Ç –æ—Ç –¥–æ—Å—Ç—É–ø–Ω–æ–≥–æ –±–∞–ª–∞–Ω—Å–∞)
    maxPositionSize: 0.1,       // –ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π —Ä–∞–∑–º–µ—Ä –ø–æ–∑–∏—Ü–∏–∏ –≤ USDT (–∑–∞—â–∏—Ç–∞ –æ—Ç –±–æ–ª—å—à–∏—Ö –æ—Ä–¥–µ—Ä–æ–≤)
    isEnabled: true,            // –í–∫–ª—é—á–µ–Ω –ª–∏ –±–æ—Ç
    useStopLoss: true,          // –ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —Å—Ç–æ–ø-–ª–æ—Å—Å
    stopLossPercent: 2.0,       // –°—Ç–æ–ø-–ª–æ—Å—Å –≤ –ø—Ä–æ—Ü–µ–Ω—Ç–∞—Ö –æ—Ç —Ü–µ–Ω—ã –≤—Ö–æ–¥–∞
    useTakeProfit: true,        // –ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —Ç–µ–π–∫-–ø—Ä–æ—Ñ–∏—Ç
    takeProfitPercent: 4.0,     // –¢–µ–π–∫-–ø—Ä–æ—Ñ–∏—Ç –≤ –ø—Ä–æ—Ü–µ–Ω—Ç–∞—Ö –æ—Ç —Ü–µ–Ω—ã –≤—Ö–æ–¥–∞
    lastSignal: 'NEUTRAL',      // –ü–æ—Å–ª–µ–¥–Ω–∏–π —Å–∏–≥–Ω–∞–ª
    lastTradeTime: null,        // –í—Ä–µ–º—è –ø–æ—Å–ª–µ–¥–Ω–µ–π —Å–¥–µ–ª–∫–∏
    minTradeInterval: 300000,   // –ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–π –∏–Ω—Ç–µ—Ä–≤–∞–ª –º–µ–∂–¥—É —Å–¥–µ–ª–∫–∞–º–∏ (5 –º–∏–Ω—É—Ç)
    leverage: 5,                // –ü–ª–µ—á–æ (–¥–ª—è —Ñ—å—é—á–µ—Ä—Å–æ–≤, –Ω–æ –æ—Å—Ç–∞–≤–∏–º –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏)
    orderType: 'MARKET',        // –¢–∏–ø –æ—Ä–¥–µ—Ä–∞: 'MARKET' –∏–ª–∏ 'LIMIT'
    trailingStop: false,        // –¢—Ä–µ–π–ª–∏–Ω–≥-—Å—Ç–æ–ø (–ø–æ–∫–∞ –Ω–µ —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω)
    sentimentThreshold: 0.6,    // –ü–æ—Ä–æ–≥ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏—è —Ä—ã–Ω–∫–∞ (–µ—Å–ª–∏ –±—É–¥–µ—Ç —Ñ—É–Ω–¥–∞–º–µ–Ω—Ç–∞–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑)
};

// –ò—Å—Ç–æ—Ä–∏—è —Å–∏–≥–Ω–∞–ª–æ–≤ –∏ —Å–¥–µ–ª–æ–∫ (–¥–ª—è –ª–æ–≥–∏–∫–∏ –∏ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞)
let tradeHistory = [];
let activeOrders = [];

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–∫ –∏–∑ –≤–µ–±-–∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞
export function updateBotSettings(newSettings) {
    botSettings = { ...botSettings, ...newSettings };
    console.log(`[BOT] –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –æ–±–Ω–æ–≤–ª–µ–Ω—ã:`, botSettings);
}

// –û—Å–Ω–æ–≤–Ω–∞—è —Ç–æ—Ä–≥–æ–≤–∞—è –ª–æ–≥–∏–∫–∞
export async function executeTradingLogic() {
    if (!botSettings.isEnabled) {
        console.log("[BOT] ‚è∏Ô∏è  –ë–æ—Ç –ø—Ä–∏–æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω.");
        return;
    }

    try {
        const symbol = botSettings.tradingPair;
        const interval = '5m'; // –ò–Ω—Ç–µ—Ä–≤–∞–ª –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ —Å–ª–∏—à–∫–æ–º –ª–∏ —Ä–∞–Ω–æ –¥–ª—è –Ω–æ–≤–æ–π —Å–¥–µ–ª–∫–∏
        if (botSettings.lastTradeTime && Date.now() - botSettings.lastTradeTime < botSettings.minTradeInterval) {
            console.log("[BOT] ‚è≥ –°–ª–∏—à–∫–æ–º —Ä–∞–Ω–æ –¥–ª—è –Ω–æ–≤–æ–π —Å–¥–µ–ª–∫–∏. –û–∂–∏–¥–∞–Ω–∏–µ...");
            return;
        }

        // –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ Kline
        const klines = await getKlines(symbol, interval, 100);
        if (!klines || klines.length === 0) {
            console.warn("[BOT] ‚ö†Ô∏è  –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö Kline –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞.");
            return;
        }

        // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Ç–æ—Ä–≥–æ–≤—ã–π —Å–∏–≥–Ω–∞–ª
        const signalData = generateTradingSignal(klines, botSettings.strategy);
        console.log(`[BOT] üìä –°–∏–≥–Ω–∞–ª: ${signalData.signal} | –£–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å: ${signalData.confidence}`);

        // –ï—Å–ª–∏ —Å–∏–≥–Ω–∞–ª –Ω–µ–π—Ç—Ä–∞–ª—å–Ω—ã–π –∏–ª–∏ —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å –Ω–∏–∑–∫–∞—è ‚Äî –Ω–∏—á–µ–≥–æ –Ω–µ –¥–µ–ª–∞–µ–º
        if (signalData.signal === 'NEUTRAL' || signalData.confidence < 0.5) {
            return;
        }

        // –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â—É—é —Ü–µ–Ω—É
        const ticker = await callBingxApi(`/openApi/swap/v1/ticker/price`, 'GET', { symbol });
        const currentPrice = parseFloat(ticker.price);

        // –ü–æ–ª—É—á–∞–µ–º –±–∞–ª–∞–Ω—Å
        const balanceData = await getAccountBalance();
        const availableBalance = parseFloat(balanceData.balance.availableBalance || 0);

        // –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º —Ä–∞–∑–º–µ—Ä –æ—Ä–¥–µ—Ä–∞
        const riskPercentage = botSettings.riskLevel * 0.01; // 1-10 -> 1%-10%
        let orderValue = availableBalance * riskPercentage;

        // –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –º–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π —Ä–∞–∑–º–µ—Ä –ø–æ–∑–∏—Ü–∏–∏
        if (orderValue > botSettings.maxPositionSize) {
            orderValue = botSettings.maxPositionSize;
        }

        const quantity = orderValue / currentPrice;

        // –£—á–∏—Ç—ã–≤–∞–µ–º –∫–æ–º–∏—Å—Å–∏—é (–ø—Ä–∏–º–µ—Ä: 0.1% –¥–ª—è –º–µ–π–∫–µ—Ä–æ–≤, 0.1% –¥–ª—è —Ç–µ–π–∫–µ—Ä–æ–≤)
        // –î–ª—è —Ä—ã–Ω–æ—á–Ω—ã—Ö –æ—Ä–¥–µ—Ä–æ–≤ ‚Äî —Ç–µ–π–∫–µ—Ä, –∫–æ–º–∏—Å—Å–∏—è –≤—ã—á–∏—Ç–∞–µ—Ç—Å—è –∏–∑ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞
        const feeRate = botSettings.orderType === 'MARKET' ? 0.001 : 0.001; // 0.1%
        const quantityAfterFee = quantity * (1 - feeRate);

        // –õ–æ–≥–∏—Ä—É–µ–º —Ä–∞—Å—á—ë—Ç
        console.log(`[BOT] üí∞ –ë–∞–ª–∞–Ω—Å: ${availableBalance} USDT | –†–∏—Å–∫: ${riskPercentage * 100}% | –ó–Ω–∞—á–µ–Ω–∏–µ –æ—Ä–¥–µ—Ä–∞: ${orderValue} USDT`);
        console.log(`[BOT] üìâ –¶–µ–Ω–∞: ${currentPrice} | –ö–æ–ª-–≤–æ: ${quantity.toFixed(6)} | –ü–æ—Å–ª–µ –∫–æ–º–∏—Å—Å–∏–∏: ${quantityAfterFee.toFixed(6)}`);

        // –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Å—Ç–æ—Ä–æ–Ω—É –æ—Ä–¥–µ—Ä–∞
        const side = signalData.signal === 'BUY' ? 'BUY' : 'SELL';

        // –†–∞–∑–º–µ—â–∞–µ–º –æ—Ä–¥–µ—Ä
        console.log(`[BOT] üöÄ –†–∞–∑–º–µ—â–∞–µ–º –æ—Ä–¥–µ—Ä: ${side} ${quantityAfterFee.toFixed(6)} ${symbol}`);
        
        // !!! –ó–ê–ö–û–ú–ú–ï–ù–¢–ò–†–û–í–ê–ù–û –î–õ–Ø –ë–ï–ó–û–ü–ê–°–ù–û–°–¢–ò !!!
        // const orderResponse = await createOrder(symbol, side, botSettings.orderType, quantityAfterFee.toFixed(6));
        // console.log("[BOT] ‚úÖ –û—Ä–¥–µ—Ä —É—Å–ø–µ—à–Ω–æ —Ä–∞–∑–º–µ—â–µ–Ω:", orderResponse);

        // –ó–∞–≥–ª—É—à–∫–∞: –∏–º–∏—Ç–∏—Ä—É–µ–º —É—Å–ø–µ—à–Ω—ã–π –æ—Ä–¥–µ—Ä
        const mockOrder = {
            orderId: `mock-${Date.now()}`,
            symbol: symbol,
            side: side,
            type: botSettings.orderType,
            quantity: quantityAfterFee.toFixed(6),
            price: currentPrice,
            status: 'FILLED',
            time: Date.now()
        };

        // –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –±–æ—Ç–∞
        botSettings.lastSignal = signalData.signal;
        botSettings.lastTradeTime = Date.now();

        // –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –∏—Å—Ç–æ—Ä–∏—é
        tradeHistory.push({
            ...mockOrder,
            signal: signalData.signal,
            confidence: signalData.confidence,
            indicators: signalData.indicators
        });

        // –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –∏—Å—Ç–æ—Ä–∏—é –ø–æ—Å–ª–µ–¥–Ω–∏–º–∏ 100 —Å–¥–µ–ª–∫–∞–º–∏
        if (tradeHistory.length > 100) {
            tradeHistory = tradeHistory.slice(-100);
        }

        console.log(`[BOT] üéØ –°–¥–µ–ª–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∞: ${side} ${quantityAfterFee.toFixed(6)} ${symbol} –ø–æ —Ü–µ–Ω–µ ${currentPrice}`);

        // –ï—Å–ª–∏ –≤–∫–ª—é—á–µ–Ω—ã —Å—Ç–æ–ø-–ª–æ—Å—Å –∏ —Ç–µ–π–∫-–ø—Ä–æ—Ñ–∏—Ç ‚Äî —Ä–∞–∑–º–µ—â–∞–µ–º –∏—Ö (–¥–ª—è –ª–∏–º–∏—Ç–Ω—ã—Ö –æ—Ä–¥–µ—Ä–æ–≤)
        if (botSettings.useStopLoss || botSettings.useTakeProfit) {
            await placeConditionalOrders(symbol, side, currentPrice, quantityAfterFee.toFixed(6));
        }

    } catch (error) {
        console.error("[BOT] ‚ùå –û—à–∏–±–∫–∞ –≤ —Ç–æ—Ä–≥–æ–≤–æ–º —Ü–∏–∫–ª–µ:", error.message);

        // –°–∞–º–æ–¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞: –ø—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–¥—ã –æ—à–∏–±–æ–∫ BingX
        if (error.message.includes('BingX API Error')) {
            const match = error.message.match(/\[(\d+)\]/);
            if (match) {
                const errorCode = parseInt(match[1]);
                handleBotError(errorCode);
            }
        }
    }
}

/**
 * –†–∞–∑–º–µ—â–µ–Ω–∏–µ —É—Å–ª–æ–≤–Ω—ã—Ö –æ—Ä–¥–µ—Ä–æ–≤ (—Å—Ç–æ–ø-–ª–æ—Å—Å –∏ —Ç–µ–π–∫-–ø—Ä–æ—Ñ–∏—Ç)
 * @param {string} symbol - –¢–æ—Ä–≥–æ–≤–∞—è –ø–∞—Ä–∞
 * @param {string} side - –°—Ç–æ—Ä–æ–Ω–∞ –æ—Å–Ω–æ–≤–Ω–æ–≥–æ –æ—Ä–¥–µ—Ä–∞ ('BUY' –∏–ª–∏ 'SELL')
 * @param {number} entryPrice - –¶–µ–Ω–∞ –≤—Ö–æ–¥–∞
 * @param {string} quantity - –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ
 */
async function placeConditionalOrders(symbol, side, entryPrice, quantity) {
    try {
        if (botSettings.useStopLoss) {
            const stopPrice = side === 'BUY' 
                ? entryPrice * (1 - botSettings.stopLossPercent / 100) 
                : entryPrice * (1 + botSettings.stopLossPercent / 100);
            
            // –î–ª—è —Ä–µ–∞–ª—å–Ω–æ–≥–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –Ω—É–∂–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —ç–Ω–¥–ø–æ–∏–Ω—Ç —É—Å–ª–æ–≤–Ω—ã—Ö –æ—Ä–¥–µ—Ä–æ–≤
            // –ü–æ–∫–∞ –ø—Ä–æ—Å—Ç–æ –ª–æ–≥–∏—Ä—É–µ–º
            console.log(`[BOT] üõë –°—Ç–æ–ø-–ª–æ—Å—Å: ${side === 'BUY' ? 'SELL' : 'BUY'} ${quantity} ${symbol} –ø–æ —Ü–µ–Ω–µ ${stopPrice.toFixed(8)}`);
        }

        if (botSettings.useTakeProfit) {
            const profitPrice = side === 'BUY' 
                ? entryPrice * (1 + botSettings.takeProfitPercent / 100) 
                : entryPrice * (1 - botSettings.takeProfitPercent / 100);
            
            console.log(`[BOT] üéØ –¢–µ–π–∫-–ø—Ä–æ—Ñ–∏—Ç: ${side === 'BUY' ? 'SELL' : 'BUY'} ${quantity} ${symbol} –ø–æ —Ü–µ–Ω–µ ${profitPrice.toFixed(8)}`);
        }
    } catch (error) {
        console.error("[BOT] ‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞–∑–º–µ—â–µ–Ω–∏–∏ —É—Å–ª–æ–≤–Ω—ã—Ö –æ—Ä–¥–µ—Ä–æ–≤:", error.message);
    }
}

/**
 * –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫ –±–æ—Ç–∞ –∏ —Å–∞–º–æ–¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞
 * @param {number} errorCode - –ö–æ–¥ –æ—à–∏–±–∫–∏ –æ—Ç BingX
 */
function handleBotError(errorCode) {
    const recoveryActions = {
        100001: () => {
            console.error("[SELF-DIAGNOSTIC] ‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–ø–∏—Å–∏. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ SECRET_KEY –∏ –∞–ª–≥–æ—Ä–∏—Ç–º –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏.");
            // –ú–æ–∂–Ω–æ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É
        },
        100419: () => {
            console.error("[SELF-DIAGNOSTIC] ‚ùå IP –Ω–µ –≤ –±–µ–ª–æ–º —Å–ø–∏—Å–∫–µ. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ API –∫–ª—é—á–∞ –Ω–∞ —Å–∞–π—Ç–µ BingX.");
            // –ú–æ–∂–Ω–æ –ø–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–π –¥–æ–º–µ–Ω
        },
        101204: async () => {
            console.warn("[SELF-DIAGNOSTIC] ‚ö†Ô∏è –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –º–∞—Ä–∂–∏–Ω—ã. –£–º–µ–Ω—å—à–∞–µ–º —Ä–∞–∑–º–µ—Ä –æ—Ä–¥–µ—Ä–∞ –≤ 2 —Ä–∞–∑–∞.");
            botSettings.riskLevel = Math.max(1, Math.floor(botSettings.riskLevel / 2));
        },
        429: () => {
            console.warn("[SELF-DIAGNOSTIC] ‚ö†Ô∏è –°–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ –∑–∞–ø—Ä–æ—Å–æ–≤. –ü—Ä–∏–æ—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ç–æ—Ä–≥–æ–≤–ª—é –Ω–∞ 1 –º–∏–Ω—É—Ç—É.");
            botSettings.isEnabled = false;
            setTimeout(() => {
                botSettings.isEnabled = true;
                console.log("[SELF-DIAGNOSTIC] ‚úÖ –¢–æ—Ä–≥–æ–≤–ª—è –≤–æ–∑–æ–±–Ω–æ–≤–ª–µ–Ω–∞ –ø–æ—Å–ª–µ –ø–∞—É–∑—ã.");
            }, 60000);
        },
        100410: () => {
            console.warn("[SELF-DIAGNOSTIC] ‚ö†Ô∏è –ü—Ä–µ–≤—ã—à–µ–Ω–æ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ –ø–æ —á–∞—Å—Ç–æ—Ç–µ. –ñ–¥–µ–º 5 –º–∏–Ω—É—Ç.");
            botSettings.isEnabled = false;
            setTimeout(() => {
                botSettings.isEnabled = true;
                console.log("[SELF-DIAGNOSTIC] ‚úÖ –¢–æ—Ä–≥–æ–≤–ª—è –≤–æ–∑–æ–±–Ω–æ–≤–ª–µ–Ω–∞ –ø–æ—Å–ª–µ 5-–º–∏–Ω—É—Ç–Ω–æ–π –ø–∞—É–∑—ã.");
            }, 300000);
        },
        101212: async () => {
            console.warn("[SELF-DIAGNOSTIC] ‚ö†Ô∏è –ï—Å—Ç—å –∞–∫—Ç–∏–≤–Ω—ã–µ –æ—Ä–¥–µ—Ä–∞. –û—Ç–º–µ–Ω—è–µ–º –∏—Ö...");
            try {
                const orders = await getOpenOrders(botSettings.tradingPair);
                for (const order of orders) {
                    await cancelOrder(botSettings.tradingPair, order.orderId);
                    console.log(`[SELF-DIAGNOSTIC] ‚úÖ –û—Ä–¥–µ—Ä ${order.orderId} –æ—Ç–º–µ–Ω–µ–Ω.`);
                }
            } catch (cancelError) {
                console.error("[SELF-DIAGNOSTIC] ‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–º–µ–Ω–∏—Ç—å –æ—Ä–¥–µ—Ä–∞:", cancelError.message);
            }
        },
        101414: () => {
            console.warn("[SELF-DIAGNOSTIC] ‚ö†Ô∏è –ü—Ä–µ–≤—ã—à–µ–Ω–æ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –ø–ª–µ—á–æ. –£–º–µ–Ω—å—à–∞–µ–º –ø–ª–µ—á–æ –¥–æ 5x.");
            botSettings.leverage = 5;
        },
        101514: () => {
            console.warn("[SELF-DIAGNOSTIC] ‚ö†Ô∏è –í—Ä–µ–º–µ–Ω–Ω–∞—è –±–ª–æ–∫–∏—Ä–æ–≤–∫–∞ –æ—Ç–∫—Ä—ã—Ç–∏—è –ø–æ–∑–∏—Ü–∏–π. –ü—Ä–∏–æ—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ç–æ—Ä–≥–æ–≤–ª—é –Ω–∞ 10 –º–∏–Ω—É—Ç.");
            botSettings.isEnabled = false;
            setTimeout(() => {
                botSettings.isEnabled = true;
                console.log("[SELF-DIAGNOSTIC] ‚úÖ –¢–æ—Ä–≥–æ–≤–ª—è –≤–æ–∑–æ–±–Ω–æ–≤–ª–µ–Ω–∞ –ø–æ—Å–ª–µ 10-–º–∏–Ω—É—Ç–Ω–æ–π –ø–∞—É–∑—ã.");
            }, 600000);
        }
    };

    if (recoveryActions[errorCode]) {
        console.log(`[SELF-DIAGNOSTIC] üõ†Ô∏è  –ü—Ä–∏–º–µ–Ω—è–µ–º –º–µ—Ä—É –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è –¥–ª—è –æ—à–∏–±–∫–∏ ${errorCode}`);
        recoveryActions[errorCode]();
    } else {
        console.warn(`[SELF-DIAGNOSTIC] ‚ùì –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞ ${errorCode}. –¢—Ä–µ–±—É–µ—Ç—Å—è —Ä—É—á–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞.`);
    }
}

/**
 * –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Ç–µ–∫—É—â–µ–≥–æ —Å–æ—Å—Ç–æ—è–Ω–∏—è –±–æ—Ç–∞ (–¥–ª—è server.js)
 * @returns {Object} –¢–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –±–æ—Ç–∞
 */
export function getBotStatus() {
    return {
        settings: { ...botSettings },
        lastSignal: botSettings.lastSignal,
        lastTradeTime: botSettings.lastTradeTime,
        tradeHistory: [...tradeHistory],
        activeOrders: [...activeOrders]
    };
}

/**
 * –ó–∞–ø—É—Å–∫–∞–µ–º —Ç–æ—Ä–≥–æ–≤—ã–π —Ü–∏–∫–ª –∫–∞–∂–¥—ã–µ 5 –º–∏–Ω—É—Ç
 */
setInterval(executeTradingLogic, 5 * 60 * 1000); // 5 –º–∏–Ω—É—Ç

// –ó–∞–ø—É—Å–∫–∞–µ–º —Å—Ä–∞–∑—É –ø—Ä–∏ —Å—Ç–∞—Ä—Ç–µ
setTimeout(executeTradingLogic, 5000); // –ü–µ—Ä–≤—ã–π –∑–∞–ø—É—Å–∫ —á–µ—Ä–µ–∑ 5 —Å–µ–∫—É–Ω–¥

console.log("[BOT] ü§ñ –¢–æ—Ä–≥–æ–≤—ã–π –±–æ—Ç –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω –∏ –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ!");
