// bot.js
import { getKlines, createOrder, getAccountInfo, getOpenOrders, callBingxApi } from './bingxApi.js';
import { generateTradingSignal } from './technicalAnalysis.js';

// –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –±–æ—Ç–∞
let botSettings = {
    tradingPair: 'BTC-USDT',
    strategy: 'stochastic',
    riskLevel: 5,
    maxPositionSize: 100,
    isEnabled: true,
    useStopLoss: false, // –î–ª—è —Å–ø–æ—Ç–∞ —Å—Ç–æ–ø-–ª–æ—Å—Å –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è –Ω–∞–ø—Ä—è–º—É—é
    useTakeProfit: false,
    lastSignal: 'NEUTRAL',
    lastTradeTime: null,
    minTradeInterval: 300000, // 5 –º–∏–Ω—É—Ç
    orderType: 'LIMIT', // –î–ª—è —Å–ø–æ—Ç–∞ –ª—É—á—à–µ LIMIT
    feeRate: 0.001, // 0.1% –∫–æ–º–∏—Å—Å–∏—è
};

let tradeHistory = [];

export function updateBotSettings(newSettings) {
    botSettings = { ...botSettings, ...newSettings };
    console.log("[BOT] –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –æ–±–Ω–æ–≤–ª–µ–Ω—ã:", botSettings);
}

export async function executeTradingLogic() {
    if (!botSettings.isEnabled) {
        console.log("[BOT] ‚è∏Ô∏è  –ü—Ä–∏–æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω");
        return;
    }

    if (botSettings.lastTradeTime && Date.now() - botSettings.lastTradeTime < botSettings.minTradeInterval) {
        console.log("[BOT] ‚è≥ –°–ª–∏—à–∫–æ–º —Ä–∞–Ω–æ –¥–ª—è –Ω–æ–≤–æ–π —Å–¥–µ–ª–∫–∏");
        return;
    }

    try {
        const symbol = botSettings.tradingPair;
        const klines = await getKlines(symbol, '5m', 100);
        if (!klines || klines.length === 0) return;

        const signalData = generateTradingSignal(klines, botSettings.strategy);
        if (signalData.signal === 'NEUTRAL' || signalData.confidence < 0.5) return;

        const ticker = await callBingxApi(`/openApi/swap/v1/ticker/price`, 'GET', { symbol });
        const currentPrice = parseFloat(ticker.price);
        const account = await getAccountInfo();

        // –û–ø—Ä–µ–¥–µ–ª—è–µ–º –±–∞–∑–æ–≤—É—é –∏ –∫–æ—Ç–∏—Ä—É–µ–º—É—é –≤–∞–ª—é—Ç—É
        const [baseAsset, quoteAsset] = symbol.split('-');
        const quoteBalance = account.balances?.find(b => b.asset === quoteAsset)?.free || 0;
        const baseBalance = account.balances?.find(b => b.asset === baseAsset)?.free || 0;

        let side, quantity, totalPrice;
        if (signalData.signal === 'BUY') {
            const riskAmount = parseFloat(quoteBalance) * (botSettings.riskLevel * 0.01);
            quantity = (riskAmount / currentPrice) * (1 - botSettings.feeRate); // –£—á—ë—Ç –∫–æ–º–∏—Å—Å–∏–∏
            side = 'BUY';
            totalPrice = quantity * currentPrice;
            if (totalPrice > botSettings.maxPositionSize) {
                quantity = (botSettings.maxPositionSize / currentPrice) * (1 - botSettings.feeRate);
            }
        } else {
            quantity = parseFloat(baseBalance) * (botSettings.riskLevel * 0.01);
            side = 'SELL';
            totalPrice = quantity * currentPrice;
        }

        if (quantity <= 0) {
            console.log("[BOT] ‚ö†Ô∏è  –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –±–∞–ª–∞–Ω—Å–∞");
            return;
        }

        console.log(`[BOT] üöÄ ${side} ${quantity.toFixed(6)} ${symbol} –ø–æ —Ü–µ–Ω–µ ${currentPrice}`);

        // !!! –ó–ê–ö–û–ú–ú–ï–ù–¢–ò–†–û–í–ê–ù–û –î–õ–Ø –ë–ï–ó–û–ü–ê–°–ù–û–°–¢–ò !!!
        // const order = await createOrder(symbol, side, botSettings.orderType, quantity.toFixed(6), currentPrice.toFixed(8));
        // console.log("[BOT] ‚úÖ –û—Ä–¥–µ—Ä:", order);

        // –ó–∞–≥–ª—É—à–∫–∞
        const mockOrder = {
            orderId: `mock-${Date.now()}`,
            symbol,
            side,
            type: botSettings.orderType,
            quantity: quantity.toFixed(6),
            price: currentPrice.toFixed(8),
            status: 'FILLED',
            time: Date.now()
        };

        botSettings.lastSignal = signalData.signal;
        botSettings.lastTradeTime = Date.now();
        tradeHistory.push({ ...mockOrder, signal: signalData.signal, confidence: signalData.confidence });

        if (tradeHistory.length > 100) tradeHistory = tradeHistory.slice(-100);

        console.log(`[BOT] üéØ –°–¥–µ–ª–∫–∞: ${side} ${quantity.toFixed(6)} ${symbol}`);

    } catch (error) {
        console.error("[BOT] ‚ùå –û—à–∏–±–∫–∞:", error.message);
        if (error.message.includes('BingX API Error')) {
            const match = error.message.match(/\[(\d+)\]/);
            if (match) handleBotError(parseInt(match[1]));
        }
    }
}

function handleBotError(errorCode) {
    const actions = {
        100001: () => console.error("‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–ø–∏—Å–∏. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ SECRET_KEY"),
        100419: () => console.error("‚ùå IP –Ω–µ –≤ –±–µ–ª–æ–º —Å–ø–∏—Å–∫–µ. –î–æ–±–∞–≤—å—Ç–µ IP Render –≤ BingX"),
        101204: () => console.warn("‚ö†Ô∏è –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤. –£–º–µ–Ω—å—à–∞–µ–º —Ä–∏—Å–∫"),
        429: () => {
            console.warn("‚ö†Ô∏è –°–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ –∑–∞–ø—Ä–æ—Å–æ–≤. –ü–∞—É–∑–∞ 1 –º–∏–Ω");
            botSettings.isEnabled = false;
            setTimeout(() => { botSettings.isEnabled = true; }, 60000);
        },
        100410: () => {
            console.warn("‚ö†Ô∏è –õ–∏–º–∏—Ç —á–∞—Å—Ç–æ—Ç—ã. –ü–∞—É–∑–∞ 5 –º–∏–Ω");
            botSettings.isEnabled = false;
            setTimeout(() => { botSettings.isEnabled = true; }, 300000);
        },
        80016: () => console.warn("‚ö†Ô∏è –û—Ä–¥–µ—Ä –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç"),
        101212: async () => {
            console.warn("‚ö†Ô∏è –ï—Å—Ç—å –∞–∫—Ç–∏–≤–Ω—ã–µ –æ—Ä–¥–µ—Ä–∞. –û—Ç–º–µ–Ω—è–µ–º...");
            const orders = await getOpenOrders(botSettings.tradingPair);
            for (const order of orders) {
                console.log(`‚úÖ –û—Ç–º–µ–Ω—ë–Ω –æ—Ä–¥–µ—Ä ${order.orderId}`);
            }
        }
    };
    if (actions[errorCode]) actions[errorCode]();
}

export function getBotStatus() {
    return {
        settings: { ...botSettings },
        lastSignal: botSettings.lastSignal,
        lastTradeTime: botSettings.lastTradeTime,
        tradeHistory: [...tradeHistory]
    };
}

// –ó–∞–ø—É—Å–∫ –∫–∞–∂–¥—ã–µ 5 –º–∏–Ω—É—Ç
setInterval(executeTradingLogic, 5 * 60 * 1000);
setTimeout(executeTradingLogic, 10000);

console.log("[BOT] ü§ñ –ì–æ—Ç–æ–≤ –∫ —Ç–æ—Ä–≥–æ–≤–ª–µ –Ω–∞ SPOT!");
