// bingxApi.js ‚Äî –û–§–ò–¶–ò–ê–õ–¨–ù–´–ô –ö–û–î –î–õ–Ø –§–¨–Æ–ß–ï–†–°–û–í (Perp Futures)
import CryptoJS from 'crypto-js';
import axios from 'axios';
import dotenv from 'dotenv';

dotenv.config();

const HOST = "open-api.bingx.com";
const PROTOCOL = "https";
const API_KEY = process.env.BINGX_API_KEY;
const SECRET_KEY = process.env.BINGX_SECRET_KEY;

if (!API_KEY || !SECRET_KEY) {
    throw new Error("BINGX_API_KEY –∏ BINGX_SECRET_KEY –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –∑–∞–¥–∞–Ω—ã –≤ .env");
}

/**
 * –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –ø–æ–¥–ø–∏—Å—å –¥–ª—è –∑–∞–ø—Ä–æ—Å–∞
 * @param {Object} payload - –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –∑–∞–ø—Ä–æ—Å–∞
 * @returns {Object} - –ø–∞—Ä–∞–º–µ—Ç—Ä—ã, –ø–æ–¥–ø–∏—Å—å –∏ –≤—Ä–µ–º–µ–Ω–Ω–∞—è –º–µ—Ç–∫–∞
 */
function generateSignature(payload) {
    const timestamp = Date.now();
    // –°–æ—Ä—Ç–∏—Ä—É–µ–º –∫–ª—é—á–∏ –ø–æ –∞–ª—Ñ–∞–≤–∏—Ç—É ‚Äî –û–ë–Ø–ó–ê–¢–ï–õ–¨–ù–û –¥–ª—è BingX
    const sortedKeys = Object.keys(payload).sort();
    let parameters = "";

    for (const key of sortedKeys) {
        if (key !== 'timestamp') {
            parameters += `${key}=${encodeURIComponent(payload[key])}&`;
        }
    }
    parameters += `timestamp=${timestamp}`;

    const signature = CryptoJS.HmacSHA256(parameters, SECRET_KEY).toString(CryptoJS.enc.Hex);
    return { parameters, signature, timestamp };
}

/**
 * –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –≤—ã–∑–æ–≤–∞ API BingX
 * @param {string} path - –ø—É—Ç—å —ç–Ω–¥–ø–æ–∏–Ω—Ç–∞
 * @param {string} method - –º–µ—Ç–æ–¥ (GET, POST –∏ —Ç.–¥.)
 * @param {Object} payload - –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –∑–∞–ø—Ä–æ—Å–∞
 * @returns {Promise} - –æ—Ç–≤–µ—Ç API
 */
export async function callBingxApi(path, method = 'GET', payload = {}) {
    try {
        const { parameters, signature } = generateSignature(payload);
        let url;

        if (method === 'GET') {
            url = `${PROTOCOL}://${HOST}${path}?${parameters}&signature=${signature}`;
        }

        const config = {
            method: method,
            url: url,
            headers: {
                'X-BX-APIKEY': API_KEY,
            },
        };

        // –î–ª—è POST ‚Äî –ø–µ—Ä–µ–¥–∞—ë–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –≤ —Ç–µ–ª–µ –∑–∞–ø—Ä–æ—Å–∞
        if (method !== 'GET') {
            config.data = {
                ...payload,
                timestamp: Date.now(),
                signature: signature
            };
        }

        // –û–±—Ä–∞–±–æ—Ç–∫–∞ –±–æ–ª—å—à–∏—Ö —á–∏—Å–µ–ª (orderID)
        config.transformResponse = (response) => {
            try {
                const parsed = JSON.parse(response);
                // –ï—Å–ª–∏ –µ—Å—Ç—å orderID ‚Äî –ø—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –≤ —Å—Ç—Ä–æ–∫—É
                if (parsed.data && parsed.data.orderId) {
                    parsed.data.orderId = parsed.data.orderId.toString();
                }
                if (parsed.data && Array.isArray(parsed.data)) {
                    parsed.data.forEach(item => {
                        if (item.orderId) {
                            item.orderId = item.orderId.toString();
                        }
                    });
                }
                return parsed;
            } catch (e) {
                return response;
            }
        };

        const response = await axios(config);

        if (response.data.code !== 0) {
            throw new Error(`BingX API Error [${response.data.code}]: ${response.data.msg}`);
        }

        return response.data.data;
    } catch (error) {
        console.error(`API Error for ${path}:`, error.message);
        throw error;
    }
}

// ‚úÖ –§–¨–Æ–ß–ï–†–°–´ ‚Äî –≠–ù–î–ü–û–ò–ù–¢–´ V2/V3

// üìà –ü–æ–ª—É—á–∏—Ç—å —Ü–µ–Ω—É ‚Äî v1 (–∞–∫—Ç—É–∞–ª—å–Ω–æ)
export async function getTickerPrice(symbol) {
    return await callBingxApi(`/openApi/swap/v1/ticker/price`, 'GET', { symbol });
}

// üìä –ü–æ–ª—É—á–∏—Ç—å —Å–≤–µ—á–∏ ‚Äî v3 (–ø–æ—Å–ª–µ–¥–Ω—è—è –≤–µ—Ä—Å–∏—è)
export async function getKlines(symbol, interval, limit = 100) {
    return await callBingxApi(`/openApi/swap/v3/quote/klines`, 'GET', { symbol, interval, limit });
}

// üí∞ –ü–æ–ª—É—á–∏—Ç—å –±–∞–ª–∞–Ω—Å –∞–∫–∫–∞—É–Ω—Ç–∞ ‚Äî v2
export async function getAccountInfo() {
    return await callBingxApi(`/openApi/swap/v2/user/balance`, 'GET', {});
}

// üõí –°–æ–∑–¥–∞—Ç—å –æ—Ä–¥–µ—Ä ‚Äî v2
export async function createOrder(symbol, side, type, quantity, price = null, stopPrice = null) {
    const payload = {
        symbol,
        side: side.toUpperCase(),
        type: type.toUpperCase(),
        quantity: parseFloat(quantity).toFixed(8)
    };
    if (price) payload.price = parseFloat(price).toFixed(8);
    if (stopPrice) payload.stopPrice = parseFloat(stopPrice).toFixed(8);
    return await callBingxApi(`/openApi/swap/v2/trade/order`, 'POST', payload);
}

// üìã –ü–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–æ–Ω—Ç—Ä–∞–∫—Ç–∞—Ö ‚Äî v2
export async function getContracts(symbol = null) {
    const payload = {};
    if (symbol) payload.symbol = symbol;
    return await callBingxApi(`/openApi/swap/v2/quote/contracts`, 'GET', payload);
}

// üìö –ü–æ–ª—É—á–∏—Ç—å –∫–Ω–∏–≥—É –æ—Ä–¥–µ—Ä–æ–≤ ‚Äî v2
export async function getDepth(symbol, limit = 5) {
    return await callBingxApi(`/openApi/swap/v2/quote/depth`, 'GET', { symbol, limit });
}

// üîÑ –ü–æ–ª—É—á–∏—Ç—å –ø–æ—Å–ª–µ–¥–Ω–∏–µ —Å–¥–µ–ª–∫–∏ ‚Äî v2
export async function getTrades(symbol, limit = 10) {
    return await callBingxApi(`/openApi/swap/v2/quote/trades`, 'GET', { symbol, limit });
}

// üí∞ –ü–æ–ª—É—á–∏—Ç—å –∏–Ω–¥–µ–∫—Å –ø—Ä–µ–º–∏–∏ –∏ —É—Ä–æ–≤–µ–Ω—å —Ñ–∏–Ω–∞–Ω—Å–∏—Ä–æ–≤–∞–Ω–∏—è ‚Äî v2
export async function getPremiumIndex(symbol) {
    return await callBingxApi(`/openApi/swap/v2/quote/premiumIndex`, 'GET', { symbol });
}

// üìÖ –ü–æ–ª—É—á–∏—Ç—å –∏—Å—Ç–æ—Ä–∏—é —Å—Ç–∞–≤–æ–∫ —Ñ–∏–Ω–∞–Ω—Å–∏—Ä–æ–≤–∞–Ω–∏—è ‚Äî v2
export async function getFundingRate(symbol, limit = 10) {
    return await callBingxApi(`/openApi/swap/v2/quote/fundingRate`, 'GET', { symbol, limit });
}

// üìà –ü–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –æ—Ç–∫—Ä—ã—Ç—ã—Ö –ø—Ä–æ—Ü–µ–Ω—Ç–æ–≤ ‚Äî v2
export async function getOpenInterest(symbol) {
    return await callBingxApi(`/openApi/swap/v2/quote/openInterest`, 'GET', { symbol });
}

// üìä –ü–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∏–∑–º–µ–Ω–µ–Ω–∏—è —Ü–µ–Ω –∑–∞ 24 —á–∞—Å–∞ ‚Äî v2
export async function getTicker24hr(symbol = null) {
    const payload = {};
    if (symbol) payload.symbol = symbol;
    return await callBingxApi(`/openApi/swap/v2/quote/ticker`, 'GET', payload);
}

// üìñ –ü–æ–ª—É—á–∏—Ç—å –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏–µ –æ—Ä–¥–µ—Ä–∞ –Ω–∞ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ ‚Äî v1
export async function getHistoricalTrades(symbol, limit = 500, fromId = null) {
    const payload = { symbol, limit };
    if (fromId) payload.fromId = fromId;
    return await callBingxApi(`/openApi/swap/v1/market/historicalTrades`, 'GET', payload);
}

// üéØ –ü–æ–ª—É—á–∏—Ç—å —Ç–µ–∫—É—â–∏–π –ª—É—á—à–∏–π –æ—Ä–¥–µ—Ä ‚Äî v2
export async function getBookTicker(symbol = null) {
    const payload = {};
    if (symbol) payload.symbol = symbol;
    return await callBingxApi(`/openApi/swap/v2/quote/bookTicker`, 'GET', payload);
}

// üìà –ü–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ Kline –ø–æ –º–∞—Ä–∫–µ ‚Äî v1
export async function getMarkPriceKlines(symbol, interval, limit = 100) {
    return await callBingxApi(`/openApi/swap/v1/market/markPriceKlines`, 'GET', { symbol, interval, limit });
}

// ‚öñÔ∏è –ü–æ–ª—É—á–∏—Ç—å –ø—Ä–∞–≤–∏–ª–∞ —Ç–æ—Ä–≥–æ–≤–ª–∏ ‚Äî v1
export async function getTradingRules(symbol) {
    return await callBingxApi(`/openApi/swap/v1/tradingRules`, 'GET', { symbol });
}

// ‚è±Ô∏è –ü–æ–ª—É—á–∏—Ç—å –≤—Ä–µ–º—è —Å–µ—Ä–≤–µ—Ä–∞
export async function getServerTime() {
    const response = await callBingxApi(`/openApi/swap/v2/server/time`, 'GET', {});
    return response.serverTime;
}
// ‚úÖ –ü–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∫–æ–Ω—Ç—Ä–∞–∫—Ç–æ–≤ (—Ç–æ—Ä–≥–æ–≤—ã—Ö –ø–∞—Ä)
export async function getContracts() {
    return await callBingxApi(`/openApi/swap/v2/quote/contracts`, 'GET', {});
}
